services:
    php:
        container_name: php
        image: ${IMAGES_PREFIX:-}app-php
        restart: unless-stopped
        environment:
            SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
            DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-15}&charset=${POSTGRES_CHARSET:-utf8}
        volumes:
            - caddy_data:/data
            - caddy_config:/config
        ports:
            # HTTP
            -   target: 80
                published: ${HTTP_PORT:-80}
                protocol: tcp
            # HTTPS
            -   target: 443
                published: ${HTTPS_PORT:-443}
                protocol: tcp
            # HTTP/3
            -   target: 443
                published: ${HTTP3_PORT:-443}
                protocol: udp
    
    database:
        container_name: database
        image: postgres:${POSTGRES_VERSION:-16}-alpine
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-app}
            # You should definitely change the password in production
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
            POSTGRES_USER: ${POSTGRES_USER:-app}
        healthcheck:
            test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}" ]
            timeout: 5s
            retries: 5
            start_period: 60s
        volumes:
            - database_data:/var/lib/postgresql/data:rw
            # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
            # - ./docker/db/data:/var/lib/postgresql/data:rw
                
    nextjs:
        build:
            context: ./pwa
            target: ${BUILD_TARGET:-dev}
        image: ${IMAGES_PREFIX:-}app-nextjs
        ports:
            - '${APP_PORT:-3000}:3000'
        volumes:
            - ./pwa:/app:delegated
            - /app/node_modules
        environment:
            - NODE_ENV=development
        command: npm run dev
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:${APP_PORT:-3000}" ]
            interval: 1m
            timeout: 30s
            retries: 5

    cypress:
        build:
            context: ./pwa
            target: cypress
        image: ${IMAGES_PREFIX:-}app-cypress
        environment:
            - CYPRESS_baseUrl=http://nextjs:${APP_PORT:-3000}
        depends_on:
            nextjs:
                condition: service_healthy

volumes:
    caddy_data:
    caddy_config:
    database_data:

